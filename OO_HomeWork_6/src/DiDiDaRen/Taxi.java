package DiDiDaRen;

import java.awt.Point;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.Random;
import java.util.concurrent.LinkedBlockingQueue;

public class Taxi extends Thread{
	public Taxi(JackMa scheduler) {
		this.scheduler = scheduler;
		Random r = new  Random();
		this.Position = new myPoint(r.nextInt(80), r.nextInt(80), 0);
		this.credit = 0;
		this.status = 2;
		this.t = 0;
		this.ReqQueue = new LinkedList<myPoint>();
		this.Route = new LinkedBlockingQueue<myPoint>();
		this.choosed = false;
	}
	private myPoint Position;
	private int status;
	private int credit;
	private JackMa scheduler;
	private LinkedList<myPoint> ReqQueue; 
	private LinkedBlockingQueue<myPoint> Route;
	private double t;
	public boolean choosed;

	@Override
	public void run(){
		int i=0;
		while(true){
			if(this.status == 2){//waiting
				moving();
				if(this.ReqQueue.isEmpty()){//移动期间接单成功，直接去完成 请求
					this.Position = getNextPos();
					//output();
					i++;
				}
				if(!this.ReqQueue.isEmpty()){
					this.status = 3;
					if(this.Position.equals(ReqQueue.peekFirst())){//到达出发/目的地
						this.ReqQueue.removeFirst();
						stopService();
						i=0;
					}
					else {
						this.Position = getNextRoute();
						output();
						if(this.Position.equals(ReqQueue.peekFirst())){//到达出发/目的地
							this.ReqQueue.removeFirst();
							stopService();
							i=0;
						}
					}
				}
				if(this.status == 2&&i==100){//stop service
					stopService();
					i=0;
				}
			}else if(this.status == 1||this.status == 3){//Serving
				moving();
				this.Position = getNextRoute();
				output();
				//if(this.status==3)System.out.println(this.getName()+" "+this.Position.getX()+","+this.Position.getY());
				if(this.Position.equals(ReqQueue.peekFirst())){//到达出发/目的地
					this.ReqQueue.removeFirst();
					stopService();
					i=0;
				}
			}
		}
	}
	private void moving(){
		toSleep();
		toSleep();
	}
	private void stopService(){
		int i = this.status;
		this.status = 0;
		toSleep();toSleep();toSleep();toSleep();toSleep();
		toSleep();toSleep();toSleep();toSleep();toSleep();
		if(this.ReqQueue.isEmpty()) this.status = 2;//已完成请求，进入等待
		else if(i == 1) this.status =3;
		else if(i == 3) this.status =1;
		else this.status = i;
		this.choosed =false;
	}
	private void toSleep() {
		try {
			sleep(100);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		t+=0.1;
	}
///////////////////////////////////////////////////////////////////////////////////////	f:/Map [CR,(0,0),(79,79)]
	private myPoint getNextPos(){//when status == 2
		myPoint p = this.scheduler.getNexrPos(Position);
		return p;
	}
	private myPoint getNextRoute(){//when status == 1
		try {
			return this.Route.take();
		} catch (InterruptedException e) {
			return null;
		}
	}
///////////////////////////////////////////////////////////////////////////////////////	
	public void AddNewReq(myPoint toAdd){
		this.ReqQueue.add(toAdd);
	}
	public void AddRoute(myPoint route){
		this.Route.add(route);
	}
//////////////////////////////////////////////////////////////////////////////////////
	public boolean Grab(myPoint C){
		if(Math.abs(C.getX()-this.Position.getX())<=2&&Math.abs(C.getY()-this.Position.getY())<=2){
			return true;
		}
		else return false;
	}
	public void addCredit(int n){
		this.credit+=n;
	}
	@Override
	public boolean equals(Object obj) {
		Taxi taxi = (Taxi) obj;
		return this.getName().equals(taxi.getName());
	}
////////////////////////////////////////////////////////////////////////////////////////
	public int getCredit() {
		return this.credit;
	}
	public myPoint getPosition() {
		myPoint p = new myPoint(this.Position.getX(), this.Position.getY(), 0);
		return p;
	}
	public myPoint getTerminal(){
		if(this.ReqQueue.isEmpty())
			return new myPoint(this.Position.getX(), this.Position.getY(), 0);
		else return this.ReqQueue.peekLast();
	}
	public int getStatus() {
		return status;
	}
	public Point toPoint() {
		return new Point(this.Position.getX(), this.Position.getY());
	}
	public double getT() {
		return t;
	}
//////////////////////////////////////////////////////////////////////////////////////////
	private void output(){
		Double Time = (double)System.currentTimeMillis()/1000;
		String S = String.format("%.1f", this.t)+": ("+this.Position.getX()+","+this.Position.getY()+") "+this.status+" heading("
				+this.ReqQueue.peekFirst().getX()+","+this.ReqQueue.peekFirst().getY()+")";
		FileWriter fs = null;
		try {
				fs = new FileWriter(this.getName()+".txt", true);
			} catch (IOException e) {
				e.printStackTrace();
			}
		PrintWriter p = new PrintWriter(fs);
		p.println(S);
		p.close();
	}
	@Override
	public String toString() {
		return String.format("%.1f", this.t)+" "+this.getName()+":"+"("+this.Position.getX()+","+this.Position.getY()+") Credit"+this.credit+" Status="+this.status;
	}
}


/*[CR,(18,18),(79,79)]
[CR,(15,03),(79,78)]
[CR,(76,54),(0,0)]
[CR,(63,58),(79,79)]
[CR,(59,58),(61,56)]

[CR,(7,5),(9,7)]
[CR,(7,6),(9,7)]
[CR,(7,7),(9,7)]


[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,5),(9,7)]
[CR,(7,6),(9,7)]
[CR,(7,7),(9,7)]


[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,5),(9,7)]
[CR,(7,6),(9,7)]
[CR,(7,7),(9,7)]


[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,5),(9,7)]
[CR,(7,6),(9,7)]
[CR,(7,7),(9,7)]


[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,5),(9,7)]
[CR,(7,6),(9,7)]
[CR,(7,7),(9,7)]


[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,5),(9,7)]
[CR,(7,6),(9,7)]
[CR,(7,7),(9,7)]


[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,5),(9,7)]
[CR,(7,6),(9,7)]
[CR,(7,7),(9,7)]


[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]
[CR,(7,8),(9,7)]

[CR,(4,3),(4,1)]
[CR,(4,4),(4,1)]
[CR,(6,4),(4,1)]
[CR,(5,4),(4,1)]

[CR,(51,22),(8,10)]
[CR,(51,22),(8,11)]
[CR,(51,22),(8,12)]
[CR,(51,22),(8,13)]
[CR,(51,22),(8,14)]
[CR,(51,22),(8,15)]

[CR,(3,3),(8,10)]
[CR,(3,3),(8,11)]
[CR,(3,3),(8,12)]
[CR,(3,3),(8,13)]
[CR,(3,3),(8,14)]
[CR,(3,3),(8,15)]

[CR,(10,7),(10,10)]
[CR,(10,7),(10,9)]

*/
